import math

# p = proablity the honest node finds the next block
# q = proablity the attacker finds the next block
# z = number of blocks required for attack
# k = number of confirmations


def BitcoinAttackerSuccessProbablity(q, z):
    # probablity of honest finding the next node is 1 - probablity the attacker
    # will find the next
    p = 1 - q
    # lambda is equal to the number of blocks times by the division of attacker
    # and honest finding the next block
    lam = z * (q / p)

    return 1 - sum(
            (lam ** k) * math.exp(-lam) / math.factorial(k)
            * (1 - (q / p) ** (z - k))
            for k in range(0, z+1)
            )

def frange(start, stop, step):
# needed for a quick for loop using floating point numbers (frange)
     x = start
     while x < stop:
         yield x
         x += step


'''Displays LARGE amount of data that was imported to excel to create a graph'''
for y in frange(0.01, 0.1, 0.01):
    for x in range(1,6):
        a = 100 * BitcoinAttackerSuccessProbablity(y, x)
        a = '{0:.50f}'.format(a)
        print("P(x):" + str(a) + "  q:" + str(y) + "     z:" + str(x) )
    print("\n")

'''
OUTPUT 
P(x):2.00496595043188063911543395079206675291061401367188  q:0.01     z:1
P(x):0.05013028220883786190142927807755768299102783203125  q:0.01     z:2
P(x):0.00130323172095048178675824601668864488601684570312  q:0.01     z:3
P(x):0.00003441313627394748664301005192101001739501953125  q:0.01     z:4
P(x):0.00000091614249519977875024778768420219421386718750  q:0.01     z:5


P(x):4.01972174494324985261073379660956561565399169921875  q:0.02     z:1
P(x):0.20101701588703946299574454315006732940673828125000  q:0.02     z:2
P(x):0.01044934108211936774068817612715065479278564453125  q:0.02     z:3
P(x):0.00055170449443364688590918376576155424118041992188  q:0.02     z:4
P(x):0.00002936696568145436003760551102459430694580078125  q:0.02     z:5


P(x):6.04404067114048260123126965481787919998168945312500  q:0.03     z:1
P(x):0.45334435095021330397457859362475574016571044921875  q:0.03     z:2
P(x):0.03533742647302551276311533001717180013656616210938  q:0.03     z:3
P(x):0.00279757699600535758577279921155422925949096679688  q:0.03     z:4
P(x):0.00022328639447399822870465868618339300155639648438  q:0.03     z:5


P(x):8.07767702704092016574577428400516510009765625000000  q:0.04     z:1
P(x):0.80771154777609099895130384538788348436355590820312  q:0.04     z:2
P(x):0.08391007810477635331380952266044914722442626953125  q:0.04     z:3
P(x):0.00885298336670281571514351526275277137756347656250  q:0.04     z:4
P(x):0.00094166345074864210573650780133903026580810546875  q:0.04     z:5


P(x):10.12036505107437633910194563213735818862915039062500  q:0.05     z:1
P(x):1.26462603991837063688308262499049305915832519531250  q:0.05     z:2
P(x):0.16413210912481490666436911851633340120315551757812  q:0.05     z:3
P(x):0.02163307312512685598449024837464094161987304687500  q:0.05     z:4
P(x):0.00287455187714114046571012295316904783248901367188  q:0.05     z:5


P(x):12.17181779578032596589309832779690623283386230468750  q:0.060000000000000005     z:1
P(x):1.82449613621222805903698827023617923259735107421875  q:0.060000000000000005     z:2
P(x):0.28396741153478011199240427231416106224060058593750  q:0.060000000000000005     z:3
P(x):0.04488084404090653123375886934809386730194091796875  q:0.060000000000000005     z:4
P(x):0.00715116364197188048024145246017724275588989257812  q:0.060000000000000005     z:5


P(x):14.23172594248983635623062582453712821006774902343750  q:0.07     z:1
P(x):2.48762335259588018843146528524812310934066772460938  q:0.07     z:2
P(x):0.45135385884795820032877600169740617275238037109375  q:0.07     z:3
P(x):0.08315501207875053424345423991326242685317993164062  q:0.07     z:4
P(x):0.01544464570539805237103792023845016956329345703125  q:0.07     z:5


P(x):16.29975655419471181062363029923290014266967773437500  q:0.08     z:1
P(x):3.25419436489283731006594280188437551259994506835938  q:0.08     z:2
P(x):0.67417618124441247573486180044710636138916015625000  q:0.08     z:3
P(x):0.14181160452960694939861241437029093503952026367188  q:0.08     z:4
P(x):0.03007201397930980846240345272235572338104248046875  q:0.08     z:5


P(x):18.37555176372465126632960163988173007965087890625000  q:0.09     z:1
P(x):4.12427257494942800519766024081036448478698730468750  q:0.09     z:2
P(x):0.96023674415121051950450237200129777193069458007812  q:0.09     z:3
P(x):0.22697877595938553696441886131651699542999267578125  q:0.09     z:4
P(x):0.05408759616892799826359805592801421880722045898438  q:0.09     z:5


P(x):20.45872739427824171798420138657093048095703125000000  q:0.09999999999999999     z:1
P(x):5.09778928393386188133717951131984591484069824218750  q:0.09999999999999999     z:2
P(x):1.31722416788965235312502954911906272172927856445312  q:0.09999999999999999     z:3
P(x):0.34552434664851805479202084825374186038970947265625  q:0.09999999999999999     z:4
P(x):0.09136821879279777292026665236335247755050659179688  q:0.09999999999999999     z:5
'''
